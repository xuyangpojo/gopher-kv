// 4. (简单)时钟算法（CLOCK）：维护一个长得像时钟的被分成N份的圆圈，每次访问后指针转动一下。
// 新填入的页面的标识位为1。若后续替换时发现位置上的标志位为1，则标志位-1(给它一次机会)，
// 若位置上的标志位为0，则执行替换。CLOCK算法是试图用更少的资源去模拟LRU。
// 5. 改进式时钟CLOCK算法：给每个位置上的页面设置访问标志位`A`和修改标志位`M`。
// 先进行第一轮扫描，寻找`A=0;M=0`的页面进行替换，第一轮扫描不会进行A标志位-1的操作。
// 再进行第二轮扫描，寻找`A=0;M=1`的页面进行替换，第二轮扫描会进行简单时钟算法中A-1的操作。
// 总结来说，改进后的CLOCK算法在之前的一次扫描基础上，依然考虑主因素`A`，
// 但是在主因素`A`相同的情况下，再考虑一下副因素`M`，以求达到更好的效果。